package clojure.asm;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.util.Arrays;
import java.util.List;
/**
 * JNA Wrapper for library <b>LLVM</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface LLVMLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("LLVM-3.6svn", true, LLVMLibrary.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LLVMLibrary.JNA_LIBRARY_NAME, MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final LLVMLibrary INSTANCE = (LLVMLibrary)Native.loadLibrary(LLVMLibrary.JNA_LIBRARY_NAME, LLVMLibrary.class, MangledFunctionMapper.DEFAULT_OPTIONS);
	public static interface LLVMAttribute {
		public static final int LLVMZExtAttribute = 1 << 0;
		public static final int LLVMSExtAttribute = 1 << 1;
		public static final int LLVMNoReturnAttribute = 1 << 2;
		public static final int LLVMInRegAttribute = 1 << 3;
		public static final int LLVMStructRetAttribute = 1 << 4;
		public static final int LLVMNoUnwindAttribute = 1 << 5;
		public static final int LLVMNoAliasAttribute = 1 << 6;
		public static final int LLVMByValAttribute = 1 << 7;
		public static final int LLVMNestAttribute = 1 << 8;
		public static final int LLVMReadNoneAttribute = 1 << 9;
		public static final int LLVMReadOnlyAttribute = 1 << 10;
		public static final int LLVMNoInlineAttribute = 1 << 11;
		public static final int LLVMAlwaysInlineAttribute = 1 << 12;
		public static final int LLVMOptimizeForSizeAttribute = 1 << 13;
		public static final int LLVMStackProtectAttribute = 1 << 14;
		public static final int LLVMStackProtectReqAttribute = 1 << 15;
		public static final int LLVMAlignment = 31 << 16;
		public static final int LLVMNoCaptureAttribute = 1 << 21;
		public static final int LLVMNoRedZoneAttribute = 1 << 22;
		public static final int LLVMNoImplicitFloatAttribute = 1 << 23;
		public static final int LLVMNakedAttribute = 1 << 24;
		public static final int LLVMInlineHintAttribute = 1 << 25;
		public static final int LLVMStackAlignment = 7 << 26;
		public static final int LLVMReturnsTwice = 1 << 29;
		public static final int LLVMUWTable = 1 << 30;
		public static final int LLVMNonLazyBind = 1 << 31;
	};
	public static interface LLVMOpcode {
		public static final int LLVMRet = 1;
		public static final int LLVMBr = 2;
		public static final int LLVMSwitch = 3;
		public static final int LLVMIndirectBr = 4;
		public static final int LLVMInvoke = 5;
		public static final int LLVMUnreachable = 7;
		public static final int LLVMAdd = 8;
		public static final int LLVMFAdd = 9;
		public static final int LLVMSub = 10;
		public static final int LLVMFSub = 11;
		public static final int LLVMMul = 12;
		public static final int LLVMFMul = 13;
		public static final int LLVMUDiv = 14;
		public static final int LLVMSDiv = 15;
		public static final int LLVMFDiv = 16;
		public static final int LLVMURem = 17;
		public static final int LLVMSRem = 18;
		public static final int LLVMFRem = 19;
		public static final int LLVMShl = 20;
		public static final int LLVMLShr = 21;
		public static final int LLVMAShr = 22;
		public static final int LLVMAnd = 23;
		public static final int LLVMOr = 24;
		public static final int LLVMXor = 25;
		public static final int LLVMAlloca = 26;
		public static final int LLVMLoad = 27;
		public static final int LLVMStore = 28;
		public static final int LLVMGetElementPtr = 29;
		public static final int LLVMTrunc = 30;
		public static final int LLVMZExt = 31;
		public static final int LLVMSExt = 32;
		public static final int LLVMFPToUI = 33;
		public static final int LLVMFPToSI = 34;
		public static final int LLVMUIToFP = 35;
		public static final int LLVMSIToFP = 36;
		public static final int LLVMFPTrunc = 37;
		public static final int LLVMFPExt = 38;
		public static final int LLVMPtrToInt = 39;
		public static final int LLVMIntToPtr = 40;
		public static final int LLVMBitCast = 41;
		public static final int LLVMAddrSpaceCast = 60;
		public static final int LLVMICmp = 42;
		public static final int LLVMFCmp = 43;
		public static final int LLVMPHI = 44;
		public static final int LLVMCall = 45;
		public static final int LLVMSelect = 46;
		public static final int LLVMUserOp1 = 47;
		public static final int LLVMUserOp2 = 48;
		public static final int LLVMVAArg = 49;
		public static final int LLVMExtractElement = 50;
		public static final int LLVMInsertElement = 51;
		public static final int LLVMShuffleVector = 52;
		public static final int LLVMExtractValue = 53;
		public static final int LLVMInsertValue = 54;
		public static final int LLVMFence = 55;
		public static final int LLVMAtomicCmpXchg = 56;
		public static final int LLVMAtomicRMW = 57;
		public static final int LLVMResume = 58;
		public static final int LLVMLandingPad = 59;
	};
	public static interface LLVMTypeKind {
		public static final int LLVMVoidTypeKind = 0;
		public static final int LLVMHalfTypeKind = 1;
		public static final int LLVMFloatTypeKind = 2;
		public static final int LLVMDoubleTypeKind = 3;
		public static final int LLVMX86_FP80TypeKind = 4;
		public static final int LLVMFP128TypeKind = 5;
		public static final int LLVMPPC_FP128TypeKind = 6;
		public static final int LLVMLabelTypeKind = 7;
		public static final int LLVMIntegerTypeKind = 8;
		public static final int LLVMFunctionTypeKind = 9;
		public static final int LLVMStructTypeKind = 10;
		public static final int LLVMArrayTypeKind = 11;
		public static final int LLVMPointerTypeKind = 12;
		public static final int LLVMVectorTypeKind = 13;
		public static final int LLVMMetadataTypeKind = 14;
		public static final int LLVMX86_MMXTypeKind = 15;
	};
	public static interface LLVMLinkage {
		public static final int LLVMExternalLinkage = 0;
		public static final int LLVMAvailableExternallyLinkage = 1;
		public static final int LLVMLinkOnceAnyLinkage = 2;
		public static final int LLVMLinkOnceODRLinkage = 3;
		public static final int LLVMLinkOnceODRAutoHideLinkage = 4;
		public static final int LLVMWeakAnyLinkage = 5;
		public static final int LLVMWeakODRLinkage = 6;
		public static final int LLVMAppendingLinkage = 7;
		public static final int LLVMInternalLinkage = 8;
		public static final int LLVMPrivateLinkage = 9;
		public static final int LLVMDLLImportLinkage = 10;
		public static final int LLVMDLLExportLinkage = 11;
		public static final int LLVMExternalWeakLinkage = 12;
		public static final int LLVMGhostLinkage = 13;
		public static final int LLVMCommonLinkage = 14;
		public static final int LLVMLinkerPrivateLinkage = 15;
		public static final int LLVMLinkerPrivateWeakLinkage = 16;
	};
	public static interface LLVMVisibility {
		public static final int LLVMDefaultVisibility = 0;
		public static final int LLVMHiddenVisibility = 1;
		public static final int LLVMProtectedVisibility = 2;
	};
	public static interface LLVMDLLStorageClass {
		public static final int LLVMDefaultStorageClass = 0;
		public static final int LLVMDLLImportStorageClass = 1;
		public static final int LLVMDLLExportStorageClass = 2;
	};
	public static interface LLVMCallConv {
		public static final int LLVMCCallConv = 0;
		public static final int LLVMFastCallConv = 8;
		public static final int LLVMColdCallConv = 9;
		public static final int LLVMWebKitJSCallConv = 12;
		public static final int LLVMAnyRegCallConv = 13;
		public static final int LLVMX86StdcallCallConv = 64;
		public static final int LLVMX86FastcallCallConv = 65;
	};
	public static interface LLVMIntPredicate {
		public static final int LLVMIntEQ = 32;
		public static final int LLVMIntNE = 33;
		public static final int LLVMIntUGT = 34;
		public static final int LLVMIntUGE = 35;
		public static final int LLVMIntULT = 36;
		public static final int LLVMIntULE = 37;
		public static final int LLVMIntSGT = 38;
		public static final int LLVMIntSGE = 39;
		public static final int LLVMIntSLT = 40;
		public static final int LLVMIntSLE = 41;
	};
	public static interface LLVMRealPredicate {
		public static final int LLVMRealPredicateFalse = 0;
		public static final int LLVMRealOEQ = 1;
		public static final int LLVMRealOGT = 2;
		public static final int LLVMRealOGE = 3;
		public static final int LLVMRealOLT = 4;
		public static final int LLVMRealOLE = 5;
		public static final int LLVMRealONE = 6;
		public static final int LLVMRealORD = 7;
		public static final int LLVMRealUNO = 8;
		public static final int LLVMRealUEQ = 9;
		public static final int LLVMRealUGT = 10;
		public static final int LLVMRealUGE = 11;
		public static final int LLVMRealULT = 12;
		public static final int LLVMRealULE = 13;
		public static final int LLVMRealUNE = 14;
		public static final int LLVMRealPredicateTrue = 15;
	};
	public static interface LLVMLandingPadClauseTy {
		public static final int LLVMLandingPadCatch = 0;
		public static final int LLVMLandingPadFilter = 1;
	};
	public static interface LLVMThreadLocalMode {
		public static final int LLVMNotThreadLocal = 0;
		public static final int LLVMGeneralDynamicTLSModel = 1;
		public static final int LLVMLocalDynamicTLSModel = 2;
		public static final int LLVMInitialExecTLSModel = 3;
		public static final int LLVMLocalExecTLSModel = 4;
	};
	public static interface LLVMAtomicOrdering {
		public static final int LLVMAtomicOrderingNotAtomic = 0;
		public static final int LLVMAtomicOrderingUnordered = 1;
		public static final int LLVMAtomicOrderingMonotonic = 2;
		public static final int LLVMAtomicOrderingAcquire = 4;
		public static final int LLVMAtomicOrderingRelease = 5;
		public static final int LLVMAtomicOrderingAcquireRelease = 6;
		public static final int LLVMAtomicOrderingSequentiallyConsistent = 7;
	};
	public static interface LLVMAtomicRMWBinOp {
		public static final int LLVMAtomicRMWBinOpXchg = 0;
		public static final int LLVMAtomicRMWBinOpAdd = 1;
		public static final int LLVMAtomicRMWBinOpSub = 2;
		public static final int LLVMAtomicRMWBinOpAnd = 3;
		public static final int LLVMAtomicRMWBinOpNand = 4;
		public static final int LLVMAtomicRMWBinOpOr = 5;
		public static final int LLVMAtomicRMWBinOpXor = 6;
		public static final int LLVMAtomicRMWBinOpMax = 7;
		public static final int LLVMAtomicRMWBinOpMin = 8;
		public static final int LLVMAtomicRMWBinOpUMax = 9;
		public static final int LLVMAtomicRMWBinOpUMin = 10;
	};
	public static interface LLVMDiagnosticSeverity {
		public static final int LLVMDSError = 0;
		public static final int LLVMDSWarning = 1;
		public static final int LLVMDSRemark = 2;
		public static final int LLVMDSNote = 3;
	};
	public static interface LLVMVerifierFailureAction {
		public static final int LLVMAbortProcessAction = 0;
		public static final int LLVMPrintMessageAction = 1;
		public static final int LLVMReturnStatusAction = 2;
	};
	public static interface LLVMLinkerMode {
		public static final int LLVMLinkerDestroySource = 0;
		public static final int LLVMLinkerPreserveSource = 1;
	};
	public static interface LLVMByteOrdering {
		public static final int LLVMBigEndian = 0;
		public static final int LLVMLittleEndian = 1;
	};
	public static interface LLVMCodeGenOptLevel {
		public static final int LLVMCodeGenLevelNone = 0;
		public static final int LLVMCodeGenLevelLess = 1;
		public static final int LLVMCodeGenLevelDefault = 2;
		public static final int LLVMCodeGenLevelAggressive = 3;
	};
	public static interface LLVMRelocMode {
		public static final int LLVMRelocDefault = 0;
		public static final int LLVMRelocStatic = 1;
		public static final int LLVMRelocPIC = 2;
		public static final int LLVMRelocDynamicNoPic = 3;
	};
	public static interface LLVMCodeModel {
		public static final int LLVMCodeModelDefault = 0;
		public static final int LLVMCodeModelJITDefault = 1;
		public static final int LLVMCodeModelSmall = 2;
		public static final int LLVMCodeModelKernel = 3;
		public static final int LLVMCodeModelMedium = 4;
		public static final int LLVMCodeModelLarge = 5;
	};
	public static interface LLVMCodeGenFileType {
		public static final int LLVMAssemblyFile = 0;
		public static final int LLVMObjectFile = 1;
	};
	public static final int LLVMDisassembler_Option_AsmPrinterVariant = (int)4;
	public static final int LLVMDisassembler_ReferenceType_Out_Objc_Selector_Ref = (int)7;
	public static final long LLVMDisassembler_ReferenceType_In_ARM64_LDRXui = (long)0x100000003L;
	public static final int LLVMDisassembler_ReferenceType_Out_Objc_CFString_Ref = (int)4;
	public static final long LLVMDisassembler_ReferenceType_In_ARM64_LDRXl = (long)0x100000004L;
	public static final int LLVMDisassembler_VariantKind_ARM64_GOTPAGEOFF = (int)4;
	public static final int LLVMDisassembler_VariantKind_ARM64_TLVP = (int)5;
	public static final int LLVMDisassembler_VariantKind_ARM64_PAGE = (int)1;
	public static final int LLVMDisassembler_Option_SetInstrComments = (int)8;
	public static final int LLVMDisassembler_VariantKind_None = (int)0;
	public static final int LLVMDisassembler_ReferenceType_Out_LitPool_CstrAddr = (int)3;
	public static final long LLVMDisassembler_ReferenceType_In_ARM64_ADDXri = (long)0x100000002L;
	public static final long LLVMDisassembler_ReferenceType_In_ARM64_ADR = (long)0x100000005L;
	public static final int LLVMDisassembler_Option_PrintLatency = (int)16;
	public static final int LLVMDisassembler_ReferenceType_Out_Objc_Message = (int)5;
	public static final int LLVMDisassembler_Option_UseMarkup = (int)1;
	public static final int LLVMDisassembler_ReferenceType_Out_Objc_Class_Ref = (int)8;
	public static final long LLVMDisassembler_ReferenceType_In_ARM64_ADRP = (long)0x100000001L;
	public static final int LLVMDisassembler_Option_PrintImmHex = (int)2;
	public static final int LLVMDisassembler_VariantKind_ARM64_PAGEOFF = (int)2;
	public static final int LLVMDisassembler_ReferenceType_Out_Objc_Message_Ref = (int)6;
	public static final int LLVMDisassembler_VariantKind_ARM64_TLVOFF = (int)6;
	public static final int LLVMDisassembler_VariantKind_ARM64_GOTPAGE = (int)3;
	public static final int LLVMDisassembler_ReferenceType_InOut_None = (int)0;
	public static final int LLVMDisassembler_ReferenceType_Out_SymbolStub = (int)1;
	public static final int LLVMDisassembler_VariantKind_ARM_HI16 = (int)1;
	public static final int LLVMDisassembler_VariantKind_ARM_LO16 = (int)2;
	public static final int LLVMDisassembler_ReferenceType_DeMangled_Name = (int)9;
	public static final int LLVMDisassembler_ReferenceType_Out_LitPool_SymAddr = (int)2;
	public static final int LLVMDisassembler_ReferenceType_In_PCrel_Load = (int)2;
	public static final int LLVMDisassembler_ReferenceType_In_Branch = (int)1;
	public static class LLVMOpInfoSymbol1 extends Structure<LLVMOpInfoSymbol1, LLVMOpInfoSymbol1.ByValue, LLVMOpInfoSymbol1.ByReference > {
		/** 1 if this symbol is present */
		public long Present;
		/** symbol name if not NULL */
		public Pointer Name;
		/** symbol value if name is NULL */
		public long Value;
		public LLVMOpInfoSymbol1() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("Present", "Name", "Value");
		}
		public LLVMOpInfoSymbol1(long Present, Pointer Name, long Value) {
			super();
			this.Present = Present;
			this.Name = Name;
			this.Value = Value;
		}
		public LLVMOpInfoSymbol1(Pointer peer) {
			super(peer);
		}
		protected ByReference newByReference() { return new ByReference(); }
		protected ByValue newByValue() { return new ByValue(); }
		protected LLVMOpInfoSymbol1 newInstance() { return new LLVMOpInfoSymbol1(); }
		public static LLVMOpInfoSymbol1[] newArray(int arrayLength) {
			return Structure.newArray(LLVMOpInfoSymbol1.class, arrayLength);
		}
		public static class ByReference extends LLVMOpInfoSymbol1 implements Structure.ByReference {
			
		};
		public static class ByValue extends LLVMOpInfoSymbol1 implements Structure.ByValue {
			
		};
	};
	public static class LLVMOpInfo1 extends Structure<LLVMOpInfo1, LLVMOpInfo1.ByValue, LLVMOpInfo1.ByReference > {
		public LLVMLibrary.LLVMOpInfoSymbol1 AddSymbol;
		public LLVMLibrary.LLVMOpInfoSymbol1 SubtractSymbol;
		public long Value;
		public long VariantKind;
		public LLVMOpInfo1() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("AddSymbol", "SubtractSymbol", "Value", "VariantKind");
		}
		public LLVMOpInfo1(LLVMLibrary.LLVMOpInfoSymbol1 AddSymbol, LLVMLibrary.LLVMOpInfoSymbol1 SubtractSymbol, long Value, long VariantKind) {
			super();
			this.AddSymbol = AddSymbol;
			this.SubtractSymbol = SubtractSymbol;
			this.Value = Value;
			this.VariantKind = VariantKind;
		}
		public LLVMOpInfo1(Pointer peer) {
			super(peer);
		}
		protected ByReference newByReference() { return new ByReference(); }
		protected ByValue newByValue() { return new ByValue(); }
		protected LLVMOpInfo1 newInstance() { return new LLVMOpInfo1(); }
		public static LLVMOpInfo1[] newArray(int arrayLength) {
			return Structure.newArray(LLVMOpInfo1.class, arrayLength);
		}
		public static class ByReference extends LLVMOpInfo1 implements Structure.ByReference {
			
		};
		public static class ByValue extends LLVMOpInfo1 implements Structure.ByValue {
			
		};
	};
	public static class LLVMMCJITCompilerOptions extends Structure<LLVMMCJITCompilerOptions, LLVMMCJITCompilerOptions.ByValue, LLVMMCJITCompilerOptions.ByReference > {
		public int OptLevel;
		/** @see LLVMCodeModel */
		public int CodeModel;
		public boolean NoFramePointerElim;
		public boolean EnableFastISel;
		public LLVMLibrary.LLVMMCJITMemoryManagerRef MCJMM;
		public LLVMMCJITCompilerOptions() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("OptLevel", "CodeModel", "NoFramePointerElim", "EnableFastISel", "MCJMM");
		}
		public LLVMMCJITCompilerOptions(int OptLevel, int CodeModel, boolean NoFramePointerElim, boolean EnableFastISel, LLVMLibrary.LLVMMCJITMemoryManagerRef MCJMM) {
			super();
			this.OptLevel = OptLevel;
			this.CodeModel = CodeModel;
			this.NoFramePointerElim = NoFramePointerElim;
			this.EnableFastISel = EnableFastISel;
			this.MCJMM = MCJMM;
		}
		public LLVMMCJITCompilerOptions(Pointer peer) {
			super(peer);
		}
		protected ByReference newByReference() { return new ByReference(); }
		protected ByValue newByValue() { return new ByValue(); }
		protected LLVMMCJITCompilerOptions newInstance() { return new LLVMMCJITCompilerOptions(); }
		public static LLVMMCJITCompilerOptions[] newArray(int arrayLength) {
			return Structure.newArray(LLVMMCJITCompilerOptions.class, arrayLength);
		}
		public static class ByReference extends LLVMMCJITCompilerOptions implements Structure.ByReference {
			
		};
		public static class ByValue extends LLVMMCJITCompilerOptions implements Structure.ByValue {
			
		};
	};
	public interface LLVMFatalErrorHandler extends Callback {
		void apply(Pointer Reason);
	};
	public interface LLVMDiagnosticHandler extends Callback {
		void apply(Pointer LLVMDiagnosticInfoRef1, Pointer voidPtr1);
	};
	public interface LLVMYieldCallback extends Callback {
		void apply(Pointer LLVMContextRef1, Pointer voidPtr1);
	};
	public interface LLVMOpInfoCallback extends Callback {
		int apply(Pointer DisInfo, long PC, long Offset, long Size, int TagType, Pointer TagBuf);
	};
	public interface LLVMSymbolLookupCallback extends Callback {
		String apply(Pointer DisInfo, long ReferenceValue, LongByReference ReferenceType, long ReferencePC, PointerByReference ReferenceName);
	};
	public interface LLVMMemoryManagerAllocateCodeSectionCallback extends Callback {
		Pointer apply(Pointer Opaque, IntByReference Size, int Alignment, int SectionID, Pointer SectionName);
	};
	public interface LLVMMemoryManagerAllocateDataSectionCallback extends Callback {
		Pointer apply(Pointer Opaque, IntByReference Size, int Alignment, int SectionID, Pointer SectionName, boolean IsReadOnly);
	};
	public interface LLVMMemoryManagerFinalizeMemoryCallback extends Callback {
		boolean apply(Pointer Opaque, PointerByReference ErrMsg);
	};
	public interface LLVMMemoryManagerDestroyCallback extends Callback {
		void apply(Pointer Opaque);
	};
	boolean LLVMLoadLibraryPermanently(String Filename);
	void LLVMInitializeCore(LLVMLibrary.LLVMPassRegistryRef R);
  void LLVMInitializeX86Target();
  void LLVMInitializeX86TargetInfo();
  void LLVMInitializeX86TargetMC();
  void LLVMInitializeX86AsmPrinter();
  void LLVMInitializeX86AsmParser();
  void LLVMInitializeX86Disassembler();
	void LLVMShutdown();
	String LLVMCreateMessage(String Message);
	void LLVMDisposeMessage(String Message);
	void LLVMInstallFatalErrorHandler(LLVMLibrary.LLVMFatalErrorHandler Handler);
	void LLVMResetFatalErrorHandler();
	void LLVMEnablePrettyStackTrace();
	LLVMLibrary.LLVMContextRef LLVMContextCreate();
	LLVMLibrary.LLVMContextRef LLVMGetGlobalContext();
	void LLVMContextSetDiagnosticHandler(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMDiagnosticHandler Handler, Pointer DiagnosticContext);
	void LLVMContextSetYieldCallback(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMYieldCallback Callback, Pointer OpaqueHandle);
	void LLVMContextDispose(LLVMLibrary.LLVMContextRef C);
	String LLVMGetDiagInfoDescription(LLVMLibrary.LLVMDiagnosticInfoRef DI);
	int LLVMGetDiagInfoSeverity(LLVMLibrary.LLVMDiagnosticInfoRef DI);
	int LLVMGetMDKindIDInContext(LLVMLibrary.LLVMContextRef C, String Name, int SLen);
	int LLVMGetMDKindID(String Name, int SLen);
	LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithName(String ModuleID);
	LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithNameInContext(String ModuleID, LLVMLibrary.LLVMContextRef C);
	void LLVMDisposeModule(LLVMLibrary.LLVMModuleRef M);
	String LLVMGetDataLayout(LLVMLibrary.LLVMModuleRef M);
	void LLVMSetDataLayout(LLVMLibrary.LLVMModuleRef M, String Triple);
	String LLVMGetTarget(LLVMLibrary.LLVMModuleRef M);
	void LLVMSetTarget(LLVMLibrary.LLVMModuleRef M, String Triple);
	void LLVMDumpModule(LLVMLibrary.LLVMModuleRef M);
	boolean LLVMPrintModuleToFile(LLVMLibrary.LLVMModuleRef M, String Filename, String ErrorMessage[]);
	String LLVMPrintModuleToString(LLVMLibrary.LLVMModuleRef M);
	void LLVMSetModuleInlineAsm(LLVMLibrary.LLVMModuleRef M, String Asm);
	LLVMLibrary.LLVMContextRef LLVMGetModuleContext(LLVMLibrary.LLVMModuleRef M);
	LLVMLibrary.LLVMTypeRef LLVMGetTypeByName(LLVMLibrary.LLVMModuleRef M, String Name);
	int LLVMGetNamedMetadataNumOperands(LLVMLibrary.LLVMModuleRef M, String name);
	void LLVMGetNamedMetadataOperands(LLVMLibrary.LLVMModuleRef M, String name, PointerByReference Dest);
	void LLVMGetNamedMetadataOperands(Pointer M, Pointer name, PointerByReference Dest);
	void LLVMAddNamedMetadataOperand(LLVMLibrary.LLVMModuleRef M, String name, LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMAddFunction(LLVMLibrary.LLVMModuleRef M, String Name, LLVMLibrary.LLVMTypeRef FunctionTy);
	LLVMLibrary.LLVMValueRef LLVMGetNamedFunction(LLVMLibrary.LLVMModuleRef M, String Name);
	LLVMLibrary.LLVMValueRef LLVMGetFirstFunction(LLVMLibrary.LLVMModuleRef M);
	LLVMLibrary.LLVMValueRef LLVMGetLastFunction(LLVMLibrary.LLVMModuleRef M);
	LLVMLibrary.LLVMValueRef LLVMGetNextFunction(LLVMLibrary.LLVMValueRef Fn);
	LLVMLibrary.LLVMValueRef LLVMGetPreviousFunction(LLVMLibrary.LLVMValueRef Fn);
	int LLVMGetTypeKind(LLVMLibrary.LLVMTypeRef Ty);
	boolean LLVMTypeIsSized(LLVMLibrary.LLVMTypeRef Ty);
	LLVMLibrary.LLVMContextRef LLVMGetTypeContext(LLVMLibrary.LLVMTypeRef Ty);
	void LLVMDumpType(LLVMLibrary.LLVMTypeRef Val);
	String LLVMPrintTypeToString(LLVMLibrary.LLVMTypeRef Val);
	LLVMLibrary.LLVMTypeRef LLVMInt1TypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMInt8TypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMInt16TypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMInt32TypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMInt64TypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMIntTypeInContext(LLVMLibrary.LLVMContextRef C, int NumBits);
	LLVMLibrary.LLVMTypeRef LLVMInt1Type();
	LLVMLibrary.LLVMTypeRef LLVMInt8Type();
	LLVMLibrary.LLVMTypeRef LLVMInt16Type();
	LLVMLibrary.LLVMTypeRef LLVMInt32Type();
	LLVMLibrary.LLVMTypeRef LLVMInt64Type();
	LLVMLibrary.LLVMTypeRef LLVMIntType(int NumBits);
	int LLVMGetIntTypeWidth(LLVMLibrary.LLVMTypeRef IntegerTy);
	LLVMLibrary.LLVMTypeRef LLVMHalfTypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMFloatTypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMDoubleTypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMX86FP80TypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMFP128TypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMPPCFP128TypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMHalfType();
	LLVMLibrary.LLVMTypeRef LLVMFloatType();
	LLVMLibrary.LLVMTypeRef LLVMDoubleType();
	LLVMLibrary.LLVMTypeRef LLVMX86FP80Type();
	LLVMLibrary.LLVMTypeRef LLVMFP128Type();
	LLVMLibrary.LLVMTypeRef LLVMPPCFP128Type();
	LLVMLibrary.LLVMTypeRef LLVMFunctionType(LLVMLibrary.LLVMTypeRef ReturnType, LLVMLibrary.LLVMTypeRef ParamTypes[], int ParamCount, boolean IsVarArg);
	boolean LLVMIsFunctionVarArg(LLVMLibrary.LLVMTypeRef FunctionTy);
	LLVMLibrary.LLVMTypeRef LLVMGetReturnType(LLVMLibrary.LLVMTypeRef FunctionTy);
	int LLVMCountParamTypes(LLVMLibrary.LLVMTypeRef FunctionTy);
	void LLVMGetParamTypes(LLVMLibrary.LLVMTypeRef FunctionTy, PointerByReference Dest);
	void LLVMGetParamTypes(Pointer FunctionTy, PointerByReference Dest);
	LLVMLibrary.LLVMTypeRef LLVMStructTypeInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMTypeRef ElementTypes[], int ElementCount, boolean Packed);
	LLVMLibrary.LLVMTypeRef LLVMStructType(LLVMLibrary.LLVMTypeRef ElementTypes[], int ElementCount, boolean Packed);
	LLVMLibrary.LLVMTypeRef LLVMStructCreateNamed(LLVMLibrary.LLVMContextRef C, String Name);
	String LLVMGetStructName(LLVMLibrary.LLVMTypeRef Ty);
	void LLVMStructSetBody(LLVMLibrary.LLVMTypeRef StructTy, LLVMLibrary.LLVMTypeRef ElementTypes[], int ElementCount, boolean Packed);
	int LLVMCountStructElementTypes(LLVMLibrary.LLVMTypeRef StructTy);
	void LLVMGetStructElementTypes(LLVMLibrary.LLVMTypeRef StructTy, PointerByReference Dest);
	void LLVMGetStructElementTypes(Pointer StructTy, PointerByReference Dest);
	boolean LLVMIsPackedStruct(LLVMLibrary.LLVMTypeRef StructTy);
	boolean LLVMIsOpaqueStruct(LLVMLibrary.LLVMTypeRef StructTy);
	LLVMLibrary.LLVMTypeRef LLVMGetElementType(LLVMLibrary.LLVMTypeRef Ty);
	LLVMLibrary.LLVMTypeRef LLVMArrayType(LLVMLibrary.LLVMTypeRef ElementType, int ElementCount);
	int LLVMGetArrayLength(LLVMLibrary.LLVMTypeRef ArrayTy);
	LLVMLibrary.LLVMTypeRef LLVMPointerType(LLVMLibrary.LLVMTypeRef ElementType, int AddressSpace);
	int LLVMGetPointerAddressSpace(LLVMLibrary.LLVMTypeRef PointerTy);
	LLVMLibrary.LLVMTypeRef LLVMVectorType(LLVMLibrary.LLVMTypeRef ElementType, int ElementCount);
	int LLVMGetVectorSize(LLVMLibrary.LLVMTypeRef VectorTy);
	LLVMLibrary.LLVMTypeRef LLVMVoidTypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMLabelTypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMX86MMXTypeInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMTypeRef LLVMVoidType();
	LLVMLibrary.LLVMTypeRef LLVMLabelType();
	LLVMLibrary.LLVMTypeRef LLVMX86MMXType();
	LLVMLibrary.LLVMTypeRef LLVMTypeOf(LLVMLibrary.LLVMValueRef Val);
	String LLVMGetValueName(LLVMLibrary.LLVMValueRef Val);
	void LLVMSetValueName(LLVMLibrary.LLVMValueRef Val, String Name);
	void LLVMDumpValue(LLVMLibrary.LLVMValueRef Val);
	String LLVMPrintValueToString(LLVMLibrary.LLVMValueRef Val);
	void LLVMReplaceAllUsesWith(LLVMLibrary.LLVMValueRef OldVal, LLVMLibrary.LLVMValueRef NewVal);
	boolean LLVMIsConstant(LLVMLibrary.LLVMValueRef Val);
	boolean LLVMIsUndef(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAArgument(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsABasicBlock(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAInlineAsm(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAMDNode(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAMDString(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAUser(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstant(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsABlockAddress(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantAggregateZero(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantArray(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantDataSequential(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantDataArray(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantDataVector(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantExpr(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantFP(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantInt(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantPointerNull(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantStruct(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAConstantVector(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAGlobalValue(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAGlobalAlias(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAGlobalObject(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAFunction(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAGlobalVariable(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAUndefValue(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAInstruction(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsABinaryOperator(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsACallInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAIntrinsicInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsADbgInfoIntrinsic(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsADbgDeclareInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAMemIntrinsic(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAMemCpyInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAMemMoveInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAMemSetInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsACmpInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAFCmpInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAICmpInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAExtractElementInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAGetElementPtrInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAInsertElementInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAInsertValueInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsALandingPadInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAPHINode(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsASelectInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAShuffleVectorInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAStoreInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsATerminatorInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsABranchInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAIndirectBrInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAInvokeInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAReturnInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsASwitchInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAUnreachableInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAResumeInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAUnaryInstruction(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAAllocaInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsACastInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAAddrSpaceCastInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsABitCastInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAFPExtInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAFPToSIInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAFPToUIInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAFPTruncInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAIntToPtrInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAPtrToIntInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsASExtInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsASIToFPInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsATruncInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAUIToFPInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAZExtInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAExtractValueInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsALoadInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMIsAVAArgInst(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMUseRef LLVMGetFirstUse(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMUseRef LLVMGetNextUse(LLVMLibrary.LLVMUseRef U);
	LLVMLibrary.LLVMValueRef LLVMGetUser(LLVMLibrary.LLVMUseRef U);
	LLVMLibrary.LLVMValueRef LLVMGetUsedValue(LLVMLibrary.LLVMUseRef U);
	LLVMLibrary.LLVMValueRef LLVMGetOperand(LLVMLibrary.LLVMValueRef Val, int Index);
	LLVMLibrary.LLVMUseRef LLVMGetOperandUse(LLVMLibrary.LLVMValueRef Val, int Index);
	void LLVMSetOperand(LLVMLibrary.LLVMValueRef User, int Index, LLVMLibrary.LLVMValueRef Val);
	int LLVMGetNumOperands(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMConstNull(LLVMLibrary.LLVMTypeRef Ty);
	LLVMLibrary.LLVMValueRef LLVMConstAllOnes(LLVMLibrary.LLVMTypeRef Ty);
	LLVMLibrary.LLVMValueRef LLVMGetUndef(LLVMLibrary.LLVMTypeRef Ty);
	boolean LLVMIsNull(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMConstPointerNull(LLVMLibrary.LLVMTypeRef Ty);
	LLVMLibrary.LLVMValueRef LLVMConstInt(LLVMLibrary.LLVMTypeRef IntTy, long N, boolean SignExtend);
	LLVMLibrary.LLVMValueRef LLVMConstIntOfArbitraryPrecision(LLVMLibrary.LLVMTypeRef IntTy, int NumWords, long Words[]);
	LLVMLibrary.LLVMValueRef LLVMConstIntOfString(LLVMLibrary.LLVMTypeRef IntTy, String Text, byte Radix);
	LLVMLibrary.LLVMValueRef LLVMConstIntOfStringAndSize(LLVMLibrary.LLVMTypeRef IntTy, String Text, int SLen, byte Radix);
	LLVMLibrary.LLVMValueRef LLVMConstReal(LLVMLibrary.LLVMTypeRef RealTy, double N);
	LLVMLibrary.LLVMValueRef LLVMConstRealOfString(LLVMLibrary.LLVMTypeRef RealTy, String Text);
	LLVMLibrary.LLVMValueRef LLVMConstRealOfStringAndSize(LLVMLibrary.LLVMTypeRef RealTy, String Text, int SLen);
	long LLVMConstIntGetZExtValue(LLVMLibrary.LLVMValueRef ConstantVal);
	long LLVMConstIntGetSExtValue(LLVMLibrary.LLVMValueRef ConstantVal);
	LLVMLibrary.LLVMValueRef LLVMConstStringInContext(LLVMLibrary.LLVMContextRef C, String Str, int Length, boolean DontNullTerminate);
	LLVMLibrary.LLVMValueRef LLVMConstString(String Str, int Length, boolean DontNullTerminate);
	boolean LLVMIsConstantString(LLVMLibrary.LLVMValueRef c);
	String LLVMGetAsString(LLVMLibrary.LLVMValueRef c, NativeSizeByReference out);
	LLVMLibrary.LLVMValueRef LLVMConstStructInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMValueRef ConstantVals[], int Count, boolean Packed);
	LLVMLibrary.LLVMValueRef LLVMConstStruct(LLVMLibrary.LLVMValueRef ConstantVals[], int Count, boolean Packed);
	LLVMLibrary.LLVMValueRef LLVMConstArray(LLVMLibrary.LLVMTypeRef ElementTy, LLVMLibrary.LLVMValueRef ConstantVals[], int Length);
	LLVMLibrary.LLVMValueRef LLVMConstNamedStruct(LLVMLibrary.LLVMTypeRef StructTy, LLVMLibrary.LLVMValueRef ConstantVals[], int Count);
	LLVMLibrary.LLVMValueRef LLVMGetElementAsConstant(LLVMLibrary.LLVMValueRef c, int idx);
	LLVMLibrary.LLVMValueRef LLVMConstVector(PointerByReference ScalarConstantVals, int Size);
	int LLVMGetConstOpcode(LLVMLibrary.LLVMValueRef ConstantVal);
	LLVMLibrary.LLVMValueRef LLVMAlignOf(LLVMLibrary.LLVMTypeRef Ty);
	LLVMLibrary.LLVMValueRef LLVMSizeOf(LLVMLibrary.LLVMTypeRef Ty);
	LLVMLibrary.LLVMValueRef LLVMConstNeg(LLVMLibrary.LLVMValueRef ConstantVal);
	LLVMLibrary.LLVMValueRef LLVMConstNSWNeg(LLVMLibrary.LLVMValueRef ConstantVal);
	LLVMLibrary.LLVMValueRef LLVMConstNUWNeg(LLVMLibrary.LLVMValueRef ConstantVal);
	LLVMLibrary.LLVMValueRef LLVMConstFNeg(LLVMLibrary.LLVMValueRef ConstantVal);
	LLVMLibrary.LLVMValueRef LLVMConstNot(LLVMLibrary.LLVMValueRef ConstantVal);
	LLVMLibrary.LLVMValueRef LLVMConstAdd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstNSWAdd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstNUWAdd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstFAdd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstSub(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstNSWSub(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstNUWSub(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstFSub(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstMul(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstNSWMul(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstNUWMul(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstFMul(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstUDiv(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstSDiv(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstExactSDiv(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstFDiv(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstURem(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstSRem(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstFRem(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstAnd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstOr(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstXor(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstICmp(int Predicate, LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstFCmp(int Predicate, LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstShl(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstLShr(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstAShr(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	LLVMLibrary.LLVMValueRef LLVMConstGEP(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMValueRef ConstantIndices[], int NumIndices);
	LLVMLibrary.LLVMValueRef LLVMConstInBoundsGEP(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMValueRef ConstantIndices[], int NumIndices);
	LLVMLibrary.LLVMValueRef LLVMConstTrunc(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstSExt(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstZExt(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstFPTrunc(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstFPExt(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstUIToFP(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstSIToFP(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstFPToUI(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstFPToSI(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstPtrToInt(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstIntToPtr(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstBitCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstAddrSpaceCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstZExtOrBitCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstSExtOrBitCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstTruncOrBitCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstPointerCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstIntCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType, boolean isSigned);
	LLVMLibrary.LLVMValueRef LLVMConstFPCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	LLVMLibrary.LLVMValueRef LLVMConstSelect(LLVMLibrary.LLVMValueRef ConstantCondition, LLVMLibrary.LLVMValueRef ConstantIfTrue, LLVMLibrary.LLVMValueRef ConstantIfFalse);
	LLVMLibrary.LLVMValueRef LLVMConstExtractElement(LLVMLibrary.LLVMValueRef VectorConstant, LLVMLibrary.LLVMValueRef IndexConstant);
	LLVMLibrary.LLVMValueRef LLVMConstInsertElement(LLVMLibrary.LLVMValueRef VectorConstant, LLVMLibrary.LLVMValueRef ElementValueConstant, LLVMLibrary.LLVMValueRef IndexConstant);
	LLVMLibrary.LLVMValueRef LLVMConstShuffleVector(LLVMLibrary.LLVMValueRef VectorAConstant, LLVMLibrary.LLVMValueRef VectorBConstant, LLVMLibrary.LLVMValueRef MaskConstant);
	LLVMLibrary.LLVMValueRef LLVMConstExtractValue(LLVMLibrary.LLVMValueRef AggConstant, IntBuffer IdxList, int NumIdx);
	LLVMLibrary.LLVMValueRef LLVMConstInsertValue(LLVMLibrary.LLVMValueRef AggConstant, LLVMLibrary.LLVMValueRef ElementValueConstant, IntBuffer IdxList, int NumIdx);
	LLVMLibrary.LLVMValueRef LLVMConstInlineAsm(LLVMLibrary.LLVMTypeRef Ty, String AsmString, String Constraints, boolean HasSideEffects, boolean IsAlignStack);
	LLVMLibrary.LLVMValueRef LLVMBlockAddress(LLVMLibrary.LLVMValueRef F, LLVMLibrary.LLVMBasicBlockRef BB);
	LLVMLibrary.LLVMModuleRef LLVMGetGlobalParent(LLVMLibrary.LLVMValueRef Global);
	boolean LLVMIsDeclaration(LLVMLibrary.LLVMValueRef Global);
	int LLVMGetLinkage(LLVMLibrary.LLVMValueRef Global);
	void LLVMSetLinkage(LLVMLibrary.LLVMValueRef Global, int Linkage);
	String LLVMGetSection(LLVMLibrary.LLVMValueRef Global);
	void LLVMSetSection(LLVMLibrary.LLVMValueRef Global, String Section);
	int LLVMGetVisibility(LLVMLibrary.LLVMValueRef Global);
	void LLVMSetVisibility(LLVMLibrary.LLVMValueRef Global, int Viz);
	int LLVMGetDLLStorageClass(LLVMLibrary.LLVMValueRef Global);
	void LLVMSetDLLStorageClass(LLVMLibrary.LLVMValueRef Global, int Class);
	boolean LLVMHasUnnamedAddr(LLVMLibrary.LLVMValueRef Global);
	void LLVMSetUnnamedAddr(LLVMLibrary.LLVMValueRef Global, boolean HasUnnamedAddr);
	int LLVMGetAlignment(LLVMLibrary.LLVMValueRef V);
	void LLVMSetAlignment(LLVMLibrary.LLVMValueRef V, int Bytes);
	LLVMLibrary.LLVMValueRef LLVMAddGlobal(LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, String Name);
	LLVMLibrary.LLVMValueRef LLVMAddGlobalInAddressSpace(LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, String Name, int AddressSpace);
	LLVMLibrary.LLVMValueRef LLVMGetNamedGlobal(LLVMLibrary.LLVMModuleRef M, String Name);
	LLVMLibrary.LLVMValueRef LLVMGetFirstGlobal(LLVMLibrary.LLVMModuleRef M);
	LLVMLibrary.LLVMValueRef LLVMGetLastGlobal(LLVMLibrary.LLVMModuleRef M);
	LLVMLibrary.LLVMValueRef LLVMGetNextGlobal(LLVMLibrary.LLVMValueRef GlobalVar);
	LLVMLibrary.LLVMValueRef LLVMGetPreviousGlobal(LLVMLibrary.LLVMValueRef GlobalVar);
	void LLVMDeleteGlobal(LLVMLibrary.LLVMValueRef GlobalVar);
	LLVMLibrary.LLVMValueRef LLVMGetInitializer(LLVMLibrary.LLVMValueRef GlobalVar);
	void LLVMSetInitializer(LLVMLibrary.LLVMValueRef GlobalVar, LLVMLibrary.LLVMValueRef ConstantVal);
	boolean LLVMIsThreadLocal(LLVMLibrary.LLVMValueRef GlobalVar);
	void LLVMSetThreadLocal(LLVMLibrary.LLVMValueRef GlobalVar, boolean IsThreadLocal);
	boolean LLVMIsGlobalConstant(LLVMLibrary.LLVMValueRef GlobalVar);
	void LLVMSetGlobalConstant(LLVMLibrary.LLVMValueRef GlobalVar, boolean IsConstant);
	int LLVMGetThreadLocalMode(LLVMLibrary.LLVMValueRef GlobalVar);
	void LLVMSetThreadLocalMode(LLVMLibrary.LLVMValueRef GlobalVar, int Mode);
	boolean LLVMIsExternallyInitialized(LLVMLibrary.LLVMValueRef GlobalVar);
	void LLVMSetExternallyInitialized(LLVMLibrary.LLVMValueRef GlobalVar, boolean IsExtInit);
	LLVMLibrary.LLVMValueRef LLVMAddAlias(LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Aliasee, String Name);
	void LLVMDeleteFunction(LLVMLibrary.LLVMValueRef Fn);
	int LLVMGetIntrinsicID(LLVMLibrary.LLVMValueRef Fn);
	int LLVMGetFunctionCallConv(LLVMLibrary.LLVMValueRef Fn);
	void LLVMSetFunctionCallConv(LLVMLibrary.LLVMValueRef Fn, int CC);
	String LLVMGetGC(LLVMLibrary.LLVMValueRef Fn);
	void LLVMSetGC(LLVMLibrary.LLVMValueRef Fn, String Name);
	void LLVMAddFunctionAttr(LLVMLibrary.LLVMValueRef Fn, int PA);
	void LLVMAddTargetDependentFunctionAttr(LLVMLibrary.LLVMValueRef Fn, String A, String V);
	int LLVMGetFunctionAttr(LLVMLibrary.LLVMValueRef Fn);
	void LLVMRemoveFunctionAttr(LLVMLibrary.LLVMValueRef Fn, int PA);
	int LLVMCountParams(LLVMLibrary.LLVMValueRef Fn);
	void LLVMGetParams(LLVMLibrary.LLVMValueRef Fn, PointerByReference Params);
	LLVMLibrary.LLVMValueRef LLVMGetParam(LLVMLibrary.LLVMValueRef Fn, int Index);
	LLVMLibrary.LLVMValueRef LLVMGetParamParent(LLVMLibrary.LLVMValueRef Inst);
	LLVMLibrary.LLVMValueRef LLVMGetFirstParam(LLVMLibrary.LLVMValueRef Fn);
	LLVMLibrary.LLVMValueRef LLVMGetLastParam(LLVMLibrary.LLVMValueRef Fn);
	LLVMLibrary.LLVMValueRef LLVMGetNextParam(LLVMLibrary.LLVMValueRef Arg);
	LLVMLibrary.LLVMValueRef LLVMGetPreviousParam(LLVMLibrary.LLVMValueRef Arg);
	void LLVMAddAttribute(LLVMLibrary.LLVMValueRef Arg, int PA);
	void LLVMRemoveAttribute(LLVMLibrary.LLVMValueRef Arg, int PA);
	int LLVMGetAttribute(LLVMLibrary.LLVMValueRef Arg);
	void LLVMSetParamAlignment(LLVMLibrary.LLVMValueRef Arg, int align);
	LLVMLibrary.LLVMValueRef LLVMMDStringInContext(LLVMLibrary.LLVMContextRef C, String Str, int SLen);
	LLVMLibrary.LLVMValueRef LLVMMDString(String Str, int SLen);
	LLVMLibrary.LLVMValueRef LLVMMDNodeInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMValueRef Vals[], int Count);
	LLVMLibrary.LLVMValueRef LLVMMDNode(LLVMLibrary.LLVMValueRef Vals[], int Count);
	String LLVMGetMDString(LLVMLibrary.LLVMValueRef V, IntBuffer Len);
	int LLVMGetMDNodeNumOperands(LLVMLibrary.LLVMValueRef V);
	void LLVMGetMDNodeOperands(LLVMLibrary.LLVMValueRef V, PointerByReference Dest);
	void LLVMGetMDNodeOperands(Pointer V, PointerByReference Dest);
	LLVMLibrary.LLVMValueRef LLVMBasicBlockAsValue(LLVMLibrary.LLVMBasicBlockRef BB);
	boolean LLVMValueIsBasicBlock(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMBasicBlockRef LLVMValueAsBasicBlock(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMGetBasicBlockParent(LLVMLibrary.LLVMBasicBlockRef BB);
	LLVMLibrary.LLVMValueRef LLVMGetBasicBlockTerminator(LLVMLibrary.LLVMBasicBlockRef BB);
	int LLVMCountBasicBlocks(LLVMLibrary.LLVMValueRef Fn);
	void LLVMGetBasicBlocks(LLVMLibrary.LLVMValueRef Fn, PointerByReference BasicBlocks);
	void LLVMGetBasicBlocks(Pointer Fn, PointerByReference BasicBlocks);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetFirstBasicBlock(LLVMLibrary.LLVMValueRef Fn);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetLastBasicBlock(LLVMLibrary.LLVMValueRef Fn);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetNextBasicBlock(LLVMLibrary.LLVMBasicBlockRef BB);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetPreviousBasicBlock(LLVMLibrary.LLVMBasicBlockRef BB);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetEntryBasicBlock(LLVMLibrary.LLVMValueRef Fn);
	LLVMLibrary.LLVMBasicBlockRef LLVMAppendBasicBlockInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMValueRef Fn, String Name);
	LLVMLibrary.LLVMBasicBlockRef LLVMAppendBasicBlock(LLVMLibrary.LLVMValueRef Fn, String Name);
	LLVMLibrary.LLVMBasicBlockRef LLVMInsertBasicBlockInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMBasicBlockRef BB, String Name);
	LLVMLibrary.LLVMBasicBlockRef LLVMInsertBasicBlock(LLVMLibrary.LLVMBasicBlockRef InsertBeforeBB, String Name);
	void LLVMDeleteBasicBlock(LLVMLibrary.LLVMBasicBlockRef BB);
	void LLVMRemoveBasicBlockFromParent(LLVMLibrary.LLVMBasicBlockRef BB);
	void LLVMMoveBasicBlockBefore(LLVMLibrary.LLVMBasicBlockRef BB, LLVMLibrary.LLVMBasicBlockRef MovePos);
	void LLVMMoveBasicBlockAfter(LLVMLibrary.LLVMBasicBlockRef BB, LLVMLibrary.LLVMBasicBlockRef MovePos);
	LLVMLibrary.LLVMValueRef LLVMGetFirstInstruction(LLVMLibrary.LLVMBasicBlockRef BB);
	LLVMLibrary.LLVMValueRef LLVMGetLastInstruction(LLVMLibrary.LLVMBasicBlockRef BB);
	int LLVMHasMetadata(LLVMLibrary.LLVMValueRef Val);
	LLVMLibrary.LLVMValueRef LLVMGetMetadata(LLVMLibrary.LLVMValueRef Val, int KindID);
	void LLVMSetMetadata(LLVMLibrary.LLVMValueRef Val, int KindID, LLVMLibrary.LLVMValueRef Node);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetInstructionParent(LLVMLibrary.LLVMValueRef Inst);
	LLVMLibrary.LLVMValueRef LLVMGetNextInstruction(LLVMLibrary.LLVMValueRef Inst);
	LLVMLibrary.LLVMValueRef LLVMGetPreviousInstruction(LLVMLibrary.LLVMValueRef Inst);
	void LLVMInstructionEraseFromParent(LLVMLibrary.LLVMValueRef Inst);
	int LLVMGetInstructionOpcode(LLVMLibrary.LLVMValueRef Inst);
	int LLVMGetICmpPredicate(LLVMLibrary.LLVMValueRef Inst);
	void LLVMSetInstructionCallConv(LLVMLibrary.LLVMValueRef Instr, int CC);
	int LLVMGetInstructionCallConv(LLVMLibrary.LLVMValueRef Instr);
	void LLVMAddInstrAttribute(LLVMLibrary.LLVMValueRef Instr, int index, int LLVMAttribute1);
	void LLVMRemoveInstrAttribute(LLVMLibrary.LLVMValueRef Instr, int index, int LLVMAttribute1);
	void LLVMSetInstrParamAlignment(LLVMLibrary.LLVMValueRef Instr, int index, int align);
	boolean LLVMIsTailCall(LLVMLibrary.LLVMValueRef CallInst);
	void LLVMSetTailCall(LLVMLibrary.LLVMValueRef CallInst, boolean IsTailCall);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetSwitchDefaultDest(LLVMLibrary.LLVMValueRef SwitchInstr);
	void LLVMAddIncoming(LLVMLibrary.LLVMValueRef PhiNode, LLVMLibrary.LLVMValueRef IncomingValues[], LLVMLibrary.LLVMBasicBlockRef IncomingBlocks[], int Count);
	int LLVMCountIncoming(LLVMLibrary.LLVMValueRef PhiNode);
	LLVMLibrary.LLVMValueRef LLVMGetIncomingValue(LLVMLibrary.LLVMValueRef PhiNode, int Index);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetIncomingBlock(LLVMLibrary.LLVMValueRef PhiNode, int Index);
	LLVMLibrary.LLVMBuilderRef LLVMCreateBuilderInContext(LLVMLibrary.LLVMContextRef C);
	LLVMLibrary.LLVMBuilderRef LLVMCreateBuilder();
	void LLVMPositionBuilder(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMBasicBlockRef Block, LLVMLibrary.LLVMValueRef Instr);
	void LLVMPositionBuilderBefore(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr);
	void LLVMPositionBuilderAtEnd(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMBasicBlockRef Block);
	LLVMLibrary.LLVMBasicBlockRef LLVMGetInsertBlock(LLVMLibrary.LLVMBuilderRef Builder);
	void LLVMClearInsertionPosition(LLVMLibrary.LLVMBuilderRef Builder);
	void LLVMInsertIntoBuilder(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr);
	void LLVMInsertIntoBuilderWithName(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr, String Name);
	void LLVMDisposeBuilder(LLVMLibrary.LLVMBuilderRef Builder);
	void LLVMSetCurrentDebugLocation(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef L);
	LLVMLibrary.LLVMValueRef LLVMGetCurrentDebugLocation(LLVMLibrary.LLVMBuilderRef Builder);
	void LLVMSetInstDebugLocation(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Inst);
	LLVMLibrary.LLVMValueRef LLVMBuildRetVoid(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1);
	LLVMLibrary.LLVMValueRef LLVMBuildRet(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V);
	LLVMLibrary.LLVMValueRef LLVMBuildAggregateRet(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef RetVals[], int N);
	LLVMLibrary.LLVMValueRef LLVMBuildBr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMBasicBlockRef Dest);
	LLVMLibrary.LLVMValueRef LLVMBuildCondBr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef If, LLVMLibrary.LLVMBasicBlockRef Then, LLVMLibrary.LLVMBasicBlockRef Else);
	LLVMLibrary.LLVMValueRef LLVMBuildSwitch(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V, LLVMLibrary.LLVMBasicBlockRef Else, int NumCases);
	LLVMLibrary.LLVMValueRef LLVMBuildIndirectBr(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Addr, int NumDests);
	LLVMLibrary.LLVMValueRef LLVMBuildInvoke(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Fn, LLVMLibrary.LLVMValueRef Args[], int NumArgs, LLVMLibrary.LLVMBasicBlockRef Then, LLVMLibrary.LLVMBasicBlockRef Catch, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildLandingPad(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef PersFn, int NumClauses, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildResume(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Exn);
	LLVMLibrary.LLVMValueRef LLVMBuildUnreachable(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1);
	void LLVMAddCase(LLVMLibrary.LLVMValueRef Switch, LLVMLibrary.LLVMValueRef OnVal, LLVMLibrary.LLVMBasicBlockRef Dest);
	void LLVMAddDestination(LLVMLibrary.LLVMValueRef IndirectBr, LLVMLibrary.LLVMBasicBlockRef Dest);
	void LLVMAddClause(LLVMLibrary.LLVMValueRef LandingPad, LLVMLibrary.LLVMValueRef ClauseVal);
	void LLVMSetCleanup(LLVMLibrary.LLVMValueRef LandingPad, boolean Val);
	LLVMLibrary.LLVMValueRef LLVMBuildAdd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNSWAdd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNUWAdd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFAdd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildSub(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNSWSub(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNUWSub(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFSub(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildMul(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNSWMul(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNUWMul(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFMul(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildUDiv(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildSDiv(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildExactSDiv(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFDiv(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildURem(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildSRem(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFRem(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildShl(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildLShr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildAShr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildAnd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildOr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildXor(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildBinOp(LLVMLibrary.LLVMBuilderRef B, int Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNeg(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNSWNeg(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef V, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNUWNeg(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef V, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFNeg(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildNot(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildMalloc(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildArrayMalloc(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Val, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildAlloca(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildArrayAlloca(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Val, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFree(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef PointerVal);
	LLVMLibrary.LLVMValueRef LLVMBuildLoad(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef PointerVal, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildStore(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMValueRef Ptr);
	LLVMLibrary.LLVMValueRef LLVMBuildGEP(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Pointer, int Indices[], int NumIndices, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildInBoundsGEP(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Pointer, int Indices[], int NumIndices, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildStructGEP(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Pointer, int Idx, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildGlobalString(LLVMLibrary.LLVMBuilderRef B, String Str, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildGlobalStringPtr(LLVMLibrary.LLVMBuilderRef B, String Str, String Name);
	boolean LLVMGetVolatile(LLVMLibrary.LLVMValueRef MemoryAccessInst);
	void LLVMSetVolatile(LLVMLibrary.LLVMValueRef MemoryAccessInst, boolean IsVolatile);
	LLVMLibrary.LLVMValueRef LLVMBuildTrunc(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildZExt(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildSExt(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFPToUI(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFPToSI(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildUIToFP(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildSIToFP(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFPTrunc(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFPExt(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildPtrToInt(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildIntToPtr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildBitCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildAddrSpaceCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildZExtOrBitCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildSExtOrBitCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildTruncOrBitCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildCast(LLVMLibrary.LLVMBuilderRef B, int Op, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildPointerCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildIntCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFPCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildICmp(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, int Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFCmp(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, int Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildPhi(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildCall(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Fn, LLVMLibrary.LLVMValueRef Args[], int NumArgs, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildSelect(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef If, LLVMLibrary.LLVMValueRef Then, LLVMLibrary.LLVMValueRef Else, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildVAArg(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef List, LLVMLibrary.LLVMTypeRef Ty, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildExtractElement(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef VecVal, LLVMLibrary.LLVMValueRef Index, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildInsertElement(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef VecVal, LLVMLibrary.LLVMValueRef EltVal, LLVMLibrary.LLVMValueRef Index, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildShuffleVector(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V1, LLVMLibrary.LLVMValueRef V2, LLVMLibrary.LLVMValueRef Mask, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildExtractValue(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef AggVal, int Index, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildInsertValue(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef AggVal, LLVMLibrary.LLVMValueRef EltVal, int Index, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildIsNull(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildIsNotNull(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildPtrDiff(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildFence(LLVMLibrary.LLVMBuilderRef B, int ordering, boolean singleThread, String Name);
	LLVMLibrary.LLVMValueRef LLVMBuildAtomicRMW(LLVMLibrary.LLVMBuilderRef B, int op, LLVMLibrary.LLVMValueRef PTR, LLVMLibrary.LLVMValueRef Val, int ordering, boolean singleThread);
	LLVMLibrary.LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule(LLVMLibrary.LLVMModuleRef M);
	void LLVMDisposeModuleProvider(LLVMLibrary.LLVMModuleProviderRef M);
	boolean LLVMCreateMemoryBufferWithContentsOfFile(String Path, PointerByReference OutMemBuf, String OutMessage[]);
	boolean LLVMCreateMemoryBufferWithContentsOfFile(Pointer Path, PointerByReference OutMemBuf, PointerByReference OutMessage);
	boolean LLVMCreateMemoryBufferWithSTDIN(PointerByReference OutMemBuf, String OutMessage[]);
	boolean LLVMCreateMemoryBufferWithSTDIN(PointerByReference OutMemBuf, PointerByReference OutMessage);
	LLVMLibrary.LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(String InputData, NativeSize InputDataLength, String BufferName, boolean RequiresNullTerminator);
	LLVMLibrary.LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(String InputData, NativeSize InputDataLength, String BufferName);
	String LLVMGetBufferStart(LLVMLibrary.LLVMMemoryBufferRef MemBuf);
	NativeSize LLVMGetBufferSize(LLVMLibrary.LLVMMemoryBufferRef MemBuf);
	void LLVMDisposeMemoryBuffer(LLVMLibrary.LLVMMemoryBufferRef MemBuf);
	LLVMLibrary.LLVMPassRegistryRef LLVMGetGlobalPassRegistry();
	LLVMLibrary.LLVMPassManagerRef LLVMCreatePassManager();
	LLVMLibrary.LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(LLVMLibrary.LLVMModuleRef M);
	LLVMLibrary.LLVMPassManagerRef LLVMCreateFunctionPassManager(LLVMLibrary.LLVMModuleProviderRef MP);
	boolean LLVMRunPassManager(LLVMLibrary.LLVMPassManagerRef PM, LLVMLibrary.LLVMModuleRef M);
	boolean LLVMInitializeFunctionPassManager(LLVMLibrary.LLVMPassManagerRef FPM);
	boolean LLVMRunFunctionPassManager(LLVMLibrary.LLVMPassManagerRef FPM, LLVMLibrary.LLVMValueRef F);
	boolean LLVMFinalizeFunctionPassManager(LLVMLibrary.LLVMPassManagerRef FPM);
	void LLVMDisposePassManager(LLVMLibrary.LLVMPassManagerRef PM);
	boolean LLVMStartMultithreaded();
	void LLVMStopMultithreaded();
	boolean LLVMIsMultithreaded();
	boolean LLVMVerifyModule(LLVMLibrary.LLVMModuleRef M, int Action, String OutMessage[]);
	boolean LLVMVerifyFunction(LLVMLibrary.LLVMValueRef Fn, int Action);
	void LLVMViewFunctionCFG(LLVMLibrary.LLVMValueRef Fn);
	void LLVMViewFunctionCFGOnly(LLVMLibrary.LLVMValueRef Fn);
	boolean LLVMParseBitcode(LLVMLibrary.LLVMMemoryBufferRef MemBuf, PointerByReference OutModule, String OutMessage[]);
	boolean LLVMParseBitcode(Pointer MemBuf, PointerByReference OutModule, PointerByReference OutMessage);
	boolean LLVMParseBitcodeInContext(LLVMLibrary.LLVMContextRef ContextRef, LLVMLibrary.LLVMMemoryBufferRef MemBuf, PointerByReference OutModule, String OutMessage[]);
	boolean LLVMParseBitcodeInContext(Pointer ContextRef, Pointer MemBuf, PointerByReference OutModule, PointerByReference OutMessage);
	boolean LLVMGetBitcodeModuleInContext(LLVMLibrary.LLVMContextRef ContextRef, LLVMLibrary.LLVMMemoryBufferRef MemBuf, PointerByReference OutM, String OutMessage[]);
	boolean LLVMGetBitcodeModuleInContext(Pointer ContextRef, Pointer MemBuf, PointerByReference OutM, PointerByReference OutMessage);
	boolean LLVMGetBitcodeModule(LLVMLibrary.LLVMMemoryBufferRef MemBuf, PointerByReference OutM, String OutMessage[]);
	boolean LLVMGetBitcodeModule(Pointer MemBuf, PointerByReference OutM, PointerByReference OutMessage);
	boolean LLVMGetBitcodeModuleProviderInContext(LLVMLibrary.LLVMContextRef ContextRef, LLVMLibrary.LLVMMemoryBufferRef MemBuf, PointerByReference OutMP, String OutMessage[]);
	boolean LLVMGetBitcodeModuleProviderInContext(Pointer ContextRef, Pointer MemBuf, PointerByReference OutMP, PointerByReference OutMessage);
	boolean LLVMGetBitcodeModuleProvider(LLVMLibrary.LLVMMemoryBufferRef MemBuf, PointerByReference OutMP, String OutMessage[]);
	boolean LLVMGetBitcodeModuleProvider(Pointer MemBuf, PointerByReference OutMP, PointerByReference OutMessage);
	boolean LLVMLinkModules(LLVMLibrary.LLVMModuleRef Dest, LLVMLibrary.LLVMModuleRef Src, int Mode, String OutMessage[]);
	int LLVMWriteBitcodeToFile(LLVMLibrary.LLVMModuleRef M, String Path);
	int LLVMWriteBitcodeToFD(LLVMLibrary.LLVMModuleRef M, int FD, int ShouldClose, int Unbuffered);
	int LLVMWriteBitcodeToFileHandle(LLVMLibrary.LLVMModuleRef M, int Handle);
	LLVMLibrary.LLVMObjectFileRef LLVMCreateObjectFile(LLVMLibrary.LLVMMemoryBufferRef MemBuf);
	void LLVMDisposeObjectFile(LLVMLibrary.LLVMObjectFileRef ObjectFile);
	LLVMLibrary.LLVMSectionIteratorRef LLVMGetSections(LLVMLibrary.LLVMObjectFileRef ObjectFile);
	void LLVMDisposeSectionIterator(LLVMLibrary.LLVMSectionIteratorRef SI);
	boolean LLVMIsSectionIteratorAtEnd(LLVMLibrary.LLVMObjectFileRef ObjectFile, LLVMLibrary.LLVMSectionIteratorRef SI);
	void LLVMMoveToNextSection(LLVMLibrary.LLVMSectionIteratorRef SI);
	void LLVMMoveToContainingSection(LLVMLibrary.LLVMSectionIteratorRef Sect, LLVMLibrary.LLVMSymbolIteratorRef Sym);
	LLVMLibrary.LLVMSymbolIteratorRef LLVMGetSymbols(LLVMLibrary.LLVMObjectFileRef ObjectFile);
	void LLVMDisposeSymbolIterator(LLVMLibrary.LLVMSymbolIteratorRef SI);
	boolean LLVMIsSymbolIteratorAtEnd(LLVMLibrary.LLVMObjectFileRef ObjectFile, LLVMLibrary.LLVMSymbolIteratorRef SI);
	void LLVMMoveToNextSymbol(LLVMLibrary.LLVMSymbolIteratorRef SI);
	String LLVMGetSectionName(LLVMLibrary.LLVMSectionIteratorRef SI);
	long LLVMGetSectionSize(LLVMLibrary.LLVMSectionIteratorRef SI);
	String LLVMGetSectionContents(LLVMLibrary.LLVMSectionIteratorRef SI);
	long LLVMGetSectionAddress(LLVMLibrary.LLVMSectionIteratorRef SI);
	boolean LLVMGetSectionContainsSymbol(LLVMLibrary.LLVMSectionIteratorRef SI, LLVMLibrary.LLVMSymbolIteratorRef Sym);
	LLVMLibrary.LLVMRelocationIteratorRef LLVMGetRelocations(LLVMLibrary.LLVMSectionIteratorRef Section);
	void LLVMDisposeRelocationIterator(LLVMLibrary.LLVMRelocationIteratorRef RI);
	boolean LLVMIsRelocationIteratorAtEnd(LLVMLibrary.LLVMSectionIteratorRef Section, LLVMLibrary.LLVMRelocationIteratorRef RI);
	void LLVMMoveToNextRelocation(LLVMLibrary.LLVMRelocationIteratorRef RI);
	String LLVMGetSymbolName(LLVMLibrary.LLVMSymbolIteratorRef SI);
	long LLVMGetSymbolAddress(LLVMLibrary.LLVMSymbolIteratorRef SI);
	long LLVMGetSymbolSize(LLVMLibrary.LLVMSymbolIteratorRef SI);
	long LLVMGetRelocationAddress(LLVMLibrary.LLVMRelocationIteratorRef RI);
	long LLVMGetRelocationOffset(LLVMLibrary.LLVMRelocationIteratorRef RI);
	LLVMLibrary.LLVMSymbolIteratorRef LLVMGetRelocationSymbol(LLVMLibrary.LLVMRelocationIteratorRef RI);
	long LLVMGetRelocationType(LLVMLibrary.LLVMRelocationIteratorRef RI);
	String LLVMGetRelocationTypeName(LLVMLibrary.LLVMRelocationIteratorRef RI);
	String LLVMGetRelocationValueString(LLVMLibrary.LLVMRelocationIteratorRef RI);
	Pointer LLVMCreateDisasm(String TripleName, Pointer DisInfo, int TagType, LLVMLibrary.LLVMOpInfoCallback GetOpInfo, LLVMLibrary.LLVMSymbolLookupCallback SymbolLookUp);
	Pointer LLVMCreateDisasmCPU(String Triple, String CPU, Pointer DisInfo, int TagType, LLVMLibrary.LLVMOpInfoCallback GetOpInfo, LLVMLibrary.LLVMSymbolLookupCallback SymbolLookUp);
	int LLVMSetDisasmOptions(Pointer DC, long Options);
	void LLVMDisasmDispose(Pointer DC);
	NativeSize LLVMDisasmInstruction(Pointer DC, ByteBuffer Bytes, long BytesSize, long PC, String OutString, NativeSize OutStringSize);
	LLVMLibrary.LLVMTargetDataRef LLVMCreateTargetData(String StringRep);
	void LLVMAddTargetData(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddTargetLibraryInfo(LLVMLibrary.LLVMTargetLibraryInfoRef TLI, LLVMLibrary.LLVMPassManagerRef PM);
	String LLVMCopyStringRepOfTargetData(LLVMLibrary.LLVMTargetDataRef TD);
	int LLVMByteOrder(LLVMLibrary.LLVMTargetDataRef TD);
	int LLVMPointerSize(LLVMLibrary.LLVMTargetDataRef TD);
	int LLVMPointerSizeForAS(LLVMLibrary.LLVMTargetDataRef TD, int AS);
	LLVMLibrary.LLVMTypeRef LLVMIntPtrType(LLVMLibrary.LLVMTargetDataRef TD);
	LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeForAS(LLVMLibrary.LLVMTargetDataRef TD, int AS);
	LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMTargetDataRef TD);
	LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeForASInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMTargetDataRef TD, int AS);
	long LLVMSizeOfTypeInBits(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
	long LLVMStoreSizeOfType(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
	long LLVMABISizeOfType(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
	int LLVMABIAlignmentOfType(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
	int LLVMCallFrameAlignmentOfType(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
	int LLVMPreferredAlignmentOfType(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
	int LLVMPreferredAlignmentOfGlobal(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMValueRef GlobalVar);
	int LLVMElementAtOffset(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef StructTy, long Offset);
	long LLVMOffsetOfElement(LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef StructTy, int Element);
	void LLVMDisposeTargetData(LLVMLibrary.LLVMTargetDataRef TD);
	LLVMLibrary.LLVMTargetRef LLVMGetFirstTarget();
	LLVMLibrary.LLVMTargetRef LLVMGetNextTarget(LLVMLibrary.LLVMTargetRef T);
	LLVMLibrary.LLVMTargetRef LLVMGetTargetFromName(String Name);
	boolean LLVMGetTargetFromTriple(String Triple, PointerByReference T, String ErrorMessage[]);
	boolean LLVMGetTargetFromTriple(Pointer Triple, PointerByReference T, PointerByReference ErrorMessage);
	String LLVMGetTargetName(LLVMLibrary.LLVMTargetRef T);
	String LLVMGetTargetDescription(LLVMLibrary.LLVMTargetRef T);
	boolean LLVMTargetHasJIT(LLVMLibrary.LLVMTargetRef T);
	boolean LLVMTargetHasTargetMachine(LLVMLibrary.LLVMTargetRef T);
	boolean LLVMTargetHasAsmBackend(LLVMLibrary.LLVMTargetRef T);
	LLVMLibrary.LLVMTargetMachineRef LLVMCreateTargetMachine(LLVMLibrary.LLVMTargetRef T, String Triple, String CPU, String Features, int Level, int Reloc, int CodeModel);
	void LLVMDisposeTargetMachine(LLVMLibrary.LLVMTargetMachineRef T);
	LLVMLibrary.LLVMTargetRef LLVMGetTargetMachineTarget(LLVMLibrary.LLVMTargetMachineRef T);
	String LLVMGetTargetMachineTriple(LLVMLibrary.LLVMTargetMachineRef T);
	String LLVMGetTargetMachineCPU(LLVMLibrary.LLVMTargetMachineRef T);
	String LLVMGetTargetMachineFeatureString(LLVMLibrary.LLVMTargetMachineRef T);
	LLVMLibrary.LLVMTargetDataRef LLVMGetTargetMachineData(LLVMLibrary.LLVMTargetMachineRef T);
	void LLVMSetTargetMachineAsmVerbosity(LLVMLibrary.LLVMTargetMachineRef T, boolean VerboseAsm);
	boolean LLVMTargetMachineEmitToFile(LLVMLibrary.LLVMTargetMachineRef T, LLVMLibrary.LLVMModuleRef M, String Filename, int codegen, String ErrorMessage[]);
	boolean LLVMTargetMachineEmitToMemoryBuffer(LLVMLibrary.LLVMTargetMachineRef T, LLVMLibrary.LLVMModuleRef M, int codegen, String ErrorMessage[], PointerByReference OutMemBuf);
	boolean LLVMTargetMachineEmitToMemoryBuffer(Pointer T, Pointer M, int codegen, PointerByReference ErrorMessage, PointerByReference OutMemBuf);
	String LLVMGetDefaultTargetTriple();
	void LLVMAddAnalysisPasses(LLVMLibrary.LLVMTargetMachineRef T, LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMLinkInJIT();
	void LLVMLinkInMCJIT();
	void LLVMLinkInInterpreter();
	LLVMLibrary.LLVMGenericValueRef LLVMCreateGenericValueOfInt(LLVMLibrary.LLVMTypeRef Ty, long N, boolean IsSigned);
	LLVMLibrary.LLVMGenericValueRef LLVMCreateGenericValueOfPointer(Pointer P);
	LLVMLibrary.LLVMGenericValueRef LLVMCreateGenericValueOfFloat(LLVMLibrary.LLVMTypeRef Ty, double N);
	int LLVMGenericValueIntWidth(LLVMLibrary.LLVMGenericValueRef GenValRef);
	long LLVMGenericValueToInt(LLVMLibrary.LLVMGenericValueRef GenVal, boolean IsSigned);
	Pointer LLVMGenericValueToPointer(LLVMLibrary.LLVMGenericValueRef GenVal);
	double LLVMGenericValueToFloat(LLVMLibrary.LLVMTypeRef TyRef, LLVMLibrary.LLVMGenericValueRef GenVal);
	void LLVMDisposeGenericValue(LLVMLibrary.LLVMGenericValueRef GenVal);
	boolean LLVMCreateExecutionEngineForModule(PointerByReference OutEE, LLVMLibrary.LLVMModuleRef M, String OutError[]);
	boolean LLVMCreateExecutionEngineForModule(PointerByReference OutEE, Pointer M, PointerByReference OutError);
	boolean LLVMCreateInterpreterForModule(PointerByReference OutInterp, LLVMLibrary.LLVMModuleRef M, String OutError[]);
	boolean LLVMCreateInterpreterForModule(PointerByReference OutInterp, Pointer M, PointerByReference OutError);
	boolean LLVMCreateJITCompilerForModule(PointerByReference OutJIT, LLVMLibrary.LLVMModuleRef M, int OptLevel, String OutError[]);
	boolean LLVMCreateJITCompilerForModule(PointerByReference OutJIT, Pointer M, int OptLevel, PointerByReference OutError);
	void LLVMInitializeMCJITCompilerOptions(LLVMLibrary.LLVMMCJITCompilerOptions Options, NativeSize SizeOfOptions);
	boolean LLVMCreateMCJITCompilerForModule(PointerByReference OutJIT, LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMMCJITCompilerOptions Options, NativeSize SizeOfOptions, PointerByReference OutError);
	boolean LLVMCreateMCJITCompilerForModule(PointerByReference OutJIT, Pointer M, LLVMLibrary.LLVMMCJITCompilerOptions Options, NativeSize SizeOfOptions, PointerByReference OutError);
	boolean LLVMCreateExecutionEngine(PointerByReference OutEE, LLVMLibrary.LLVMModuleProviderRef MP, String OutError[]);
	boolean LLVMCreateExecutionEngine(PointerByReference OutEE, Pointer MP, PointerByReference OutError);
	boolean LLVMCreateInterpreter(PointerByReference OutInterp, LLVMLibrary.LLVMModuleProviderRef MP, String OutError[]);
	boolean LLVMCreateInterpreter(PointerByReference OutInterp, Pointer MP, PointerByReference OutError);
	boolean LLVMCreateJITCompiler(PointerByReference OutJIT, LLVMLibrary.LLVMModuleProviderRef MP, int OptLevel, String OutError[]);
	boolean LLVMCreateJITCompiler(PointerByReference OutJIT, Pointer MP, int OptLevel, PointerByReference OutError);
	void LLVMDisposeExecutionEngine(LLVMLibrary.LLVMExecutionEngineRef EE);
	void LLVMRunStaticConstructors(LLVMLibrary.LLVMExecutionEngineRef EE);
	void LLVMRunStaticDestructors(LLVMLibrary.LLVMExecutionEngineRef EE);
	int LLVMRunFunctionAsMain(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef F, int ArgC, String ArgV[], String EnvP[]);
	LLVMLibrary.LLVMGenericValueRef LLVMRunFunction(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef F, int NumArgs, LLVMLibrary.LLVMGenericValueRef Args[]);
	void LLVMFreeMachineCodeForFunction(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef F);
	void LLVMAddModule(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMModuleRef M);
	void LLVMAddModuleProvider(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMModuleProviderRef MP);
	boolean LLVMRemoveModule(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMModuleRef M, PointerByReference OutMod, String OutError[]);
	boolean LLVMRemoveModule(Pointer EE, Pointer M, PointerByReference OutMod, PointerByReference OutError);
	boolean LLVMRemoveModuleProvider(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMModuleProviderRef MP, PointerByReference OutMod, String OutError[]);
	boolean LLVMRemoveModuleProvider(Pointer EE, Pointer MP, PointerByReference OutMod, PointerByReference OutError);
	boolean LLVMFindFunction(LLVMLibrary.LLVMExecutionEngineRef EE, String Name, PointerByReference OutFn);
	boolean LLVMFindFunction(Pointer EE, Pointer Name, PointerByReference OutFn);
	Pointer LLVMRecompileAndRelinkFunction(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef Fn);
	LLVMLibrary.LLVMTargetDataRef LLVMGetExecutionEngineTargetData(LLVMLibrary.LLVMExecutionEngineRef EE);
	LLVMLibrary.LLVMTargetMachineRef LLVMGetExecutionEngineTargetMachine(LLVMLibrary.LLVMExecutionEngineRef EE);
	void LLVMAddGlobalMapping(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef Global, Pointer Addr);
	Pointer LLVMGetPointerToGlobal(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef Global);
	LLVMLibrary.LLVMMCJITMemoryManagerRef LLVMCreateSimpleMCJITMemoryManager(Pointer Opaque, LLVMLibrary.LLVMMemoryManagerAllocateCodeSectionCallback AllocateCodeSection, LLVMLibrary.LLVMMemoryManagerAllocateDataSectionCallback AllocateDataSection, LLVMLibrary.LLVMMemoryManagerFinalizeMemoryCallback FinalizeMemory, LLVMLibrary.LLVMMemoryManagerDestroyCallback Destroy);
	void LLVMDisposeMCJITMemoryManager(LLVMLibrary.LLVMMCJITMemoryManagerRef MM);
	boolean LLVMParseIRInContext(LLVMLibrary.LLVMContextRef ContextRef, LLVMLibrary.LLVMMemoryBufferRef MemBuf, PointerByReference OutM, String OutMessage[]);
	boolean LLVMParseIRInContext(Pointer ContextRef, Pointer MemBuf, PointerByReference OutM, PointerByReference OutMessage);
	void LLVMInitializeTransformUtils(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeScalarOpts(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeObjCARCOpts(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeVectorization(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeInstCombine(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeIPO(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeInstrumentation(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeAnalysis(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeIPA(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeCodeGen(LLVMLibrary.LLVMPassRegistryRef R);
	void LLVMInitializeTarget(LLVMLibrary.LLVMPassRegistryRef R);
	LLVMLibrary.LLVMPassManagerBuilderRef LLVMPassManagerBuilderCreate();
	void LLVMPassManagerBuilderDispose(LLVMLibrary.LLVMPassManagerBuilderRef PMB);
	void LLVMPassManagerBuilderSetOptLevel(LLVMLibrary.LLVMPassManagerBuilderRef PMB, int OptLevel);
	void LLVMPassManagerBuilderSetSizeLevel(LLVMLibrary.LLVMPassManagerBuilderRef PMB, int SizeLevel);
	void LLVMPassManagerBuilderSetDisableUnitAtATime(LLVMLibrary.LLVMPassManagerBuilderRef PMB, boolean Value);
	void LLVMPassManagerBuilderSetDisableUnrollLoops(LLVMLibrary.LLVMPassManagerBuilderRef PMB, boolean Value);
	void LLVMPassManagerBuilderSetDisableSimplifyLibCalls(LLVMLibrary.LLVMPassManagerBuilderRef PMB, boolean Value);
	void LLVMPassManagerBuilderUseInlinerWithThreshold(LLVMLibrary.LLVMPassManagerBuilderRef PMB, int Threshold);
	void LLVMPassManagerBuilderPopulateFunctionPassManager(LLVMLibrary.LLVMPassManagerBuilderRef PMB, LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMPassManagerBuilderPopulateModulePassManager(LLVMLibrary.LLVMPassManagerBuilderRef PMB, LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMPassManagerBuilderPopulateLTOPassManager(LLVMLibrary.LLVMPassManagerBuilderRef PMB, LLVMLibrary.LLVMPassManagerRef PM, boolean Internalize, boolean RunInliner);
	void LLVMAddAggressiveDCEPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddCFGSimplificationPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddDeadStoreEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddScalarizerPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddMergedLoadStoreMotionPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddGVNPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddIndVarSimplifyPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddInstructionCombiningPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddJumpThreadingPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLICMPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLoopDeletionPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLoopIdiomPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLoopRotatePass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLoopRerollPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLoopUnrollPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLoopUnswitchPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddMemCpyOptPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddPartiallyInlineLibCallsPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddPromoteMemoryToRegisterPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddReassociatePass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddSCCPPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddScalarReplAggregatesPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddScalarReplAggregatesPassSSA(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddScalarReplAggregatesPassWithThreshold(LLVMLibrary.LLVMPassManagerRef PM, int Threshold);
	void LLVMAddSimplifyLibCallsPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddTailCallEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddConstantPropagationPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddDemoteMemoryToRegisterPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddVerifierPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddCorrelatedValuePropagationPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddEarlyCSEPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLowerExpectIntrinsicPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddTypeBasedAliasAnalysisPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddScopedNoAliasAAPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddBasicAliasAnalysisPass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddBBVectorizePass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddLoopVectorizePass(LLVMLibrary.LLVMPassManagerRef PM);
	void LLVMAddSLPVectorizePass(LLVMLibrary.LLVMPassManagerRef PM);
	/** Pointer to unknown (opaque) type */
	public static class LLVMContextRef extends PointerType {
		public LLVMContextRef(Pointer address) {
			super(address);
		}
		public LLVMContextRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMObjectFileRef extends PointerType {
		public LLVMObjectFileRef(Pointer address) {
			super(address);
		}
		public LLVMObjectFileRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMSymbolIteratorRef extends PointerType {
		public LLVMSymbolIteratorRef(Pointer address) {
			super(address);
		}
		public LLVMSymbolIteratorRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMTargetRef extends PointerType {
		public LLVMTargetRef(Pointer address) {
			super(address);
		}
		public LLVMTargetRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMDiagnosticInfoRef extends PointerType {
		public LLVMDiagnosticInfoRef(Pointer address) {
			super(address);
		}
		public LLVMDiagnosticInfoRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMValueRef extends PointerType {
		public LLVMValueRef(Pointer address) {
			super(address);
		}
		public LLVMValueRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMPassManagerRef extends PointerType {
		public LLVMPassManagerRef(Pointer address) {
			super(address);
		}
		public LLVMPassManagerRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMRelocationIteratorRef extends PointerType {
		public LLVMRelocationIteratorRef(Pointer address) {
			super(address);
		}
		public LLVMRelocationIteratorRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMTypeRef extends PointerType {
		public LLVMTypeRef(Pointer address) {
			super(address);
		}
		public LLVMTypeRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMModuleProviderRef extends PointerType {
		public LLVMModuleProviderRef(Pointer address) {
			super(address);
		}
		public LLVMModuleProviderRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMTargetMachineRef extends PointerType {
		public LLVMTargetMachineRef(Pointer address) {
			super(address);
		}
		public LLVMTargetMachineRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMModuleRef extends PointerType {
		public LLVMModuleRef(Pointer address) {
			super(address);
		}
		public LLVMModuleRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMGenericValueRef extends PointerType {
		public LLVMGenericValueRef(Pointer address) {
			super(address);
		}
		public LLVMGenericValueRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMUseRef extends PointerType {
		public LLVMUseRef(Pointer address) {
			super(address);
		}
		public LLVMUseRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMExecutionEngineRef extends PointerType {
		public LLVMExecutionEngineRef(Pointer address) {
			super(address);
		}
		public LLVMExecutionEngineRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMPassManagerBuilderRef extends PointerType {
		public LLVMPassManagerBuilderRef(Pointer address) {
			super(address);
		}
		public LLVMPassManagerBuilderRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMBasicBlockRef extends PointerType {
		public LLVMBasicBlockRef(Pointer address) {
			super(address);
		}
		public LLVMBasicBlockRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMTargetLibraryInfoRef extends PointerType {
		public LLVMTargetLibraryInfoRef(Pointer address) {
			super(address);
		}
		public LLVMTargetLibraryInfoRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMMemoryBufferRef extends PointerType {
		public LLVMMemoryBufferRef(Pointer address) {
			super(address);
		}
		public LLVMMemoryBufferRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMSectionIteratorRef extends PointerType {
		public LLVMSectionIteratorRef(Pointer address) {
			super(address);
		}
		public LLVMSectionIteratorRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMPassRegistryRef extends PointerType {
		public LLVMPassRegistryRef(Pointer address) {
			super(address);
		}
		public LLVMPassRegistryRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMMCJITMemoryManagerRef extends PointerType {
		public LLVMMCJITMemoryManagerRef(Pointer address) {
			super(address);
		}
		public LLVMMCJITMemoryManagerRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMBuilderRef extends PointerType {
		public LLVMBuilderRef(Pointer address) {
			super(address);
		}
		public LLVMBuilderRef() {
			super();
		}
	};
	/** Pointer to unknown (opaque) type */
	public static class LLVMTargetDataRef extends PointerType {
		public LLVMTargetDataRef(Pointer address) {
			super(address);
		}
		public LLVMTargetDataRef() {
			super();
		}
	};
}
